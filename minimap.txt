
void	put_pixel(int x, int y, int color, t_game *game)
{
	int	index;

	if (x >= game->y3d->biggest_width * TILE_SIZE || y >= game->y3d->height
		* TILE_SIZE || x < 0 || y < 0)
		return ;
	index = y * game->size_line + x * game->bbp / 8;
	game->data[index] = color & 0xFF;
	game->data[index + 1] = (color >> 8) & 0xFF;
	game->data[index + 2] = (color >> 16) & 0xFF;
}

void draw_square(int x, int y, int size, int color, t_game *game)
{
    for(int i = 0; i < size; i++)
        put_pixel(x + i, y, color, game);
    for(int i = 0; i < size; i++)
        put_pixel(x, y + i, color, game);
    for(int i = 0; i < size; i++)
        put_pixel(x + size, y + i, color, game);
    for(int i = 0; i < size; i++)
        put_pixel(x + i, y + size, color, game);
}
void	init_game(t_game *game, t_y3d *data, t_textures *textrure)
{
	game->mlx = mlx_init();
	game->win = mlx_new_window(game->mlx, data->biggest_width * TILE_SIZE,
			data->height * TILE_SIZE, "cub3D");
	game->img = mlx_new_image(game->mlx, data->biggest_width * TILE_SIZE,
			data->height * TILE_SIZE);
	game->data = mlx_get_data_addr(game->img, &game->bbp, &game->size_line,
			&game->endian);
	data->game = game;
	data->texture = textrure;
	game->y3d = data;
	init_player(&game->player, data);
}

void	clear_screen(t_game *game)
{
	for (int y = 0; y < game->y3d->height * TILE_SIZE; y++)
	{
		for (int x = 0; x < game->y3d->biggest_width * TILE_SIZE; x++)
		{
			put_pixel(x, y, 0x000000, game);
		}
	}
}

void draw_map(t_game *game)
{
    int color = 0x0000FF;
    for(int y = 0; game->y3d->map[y]; y++)
        for(int x = 0; game->y3d->map[y][x]; x++)
            if(game->y3d->map[y][x] == '1')
                draw_square(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, color, game);
}

void draw_line(t_player *player, t_game *game, float start_x)
{
    float cos_angle = cos(start_x);
    float sin_angle = sin(start_x);
    float ray_x = player->x;
    float ray_y = player->y;
	t_y3d	*data;

	data = game->y3d;
        while(!touch(ray_x, ray_y, data))
        {
           put_pixel(ray_x, ray_y, 0xFF0000, game);
           ray_x += cos_angle;
        ray_y += sin_angle;
        }
}

int	draw_loop(t_game *game)
{
	float	fraction;
	float	start_x;;
	int		i;
	t_y3d	*data;

	data = game->y3d;
	clear_screen(game);
	move_player(&game->player, game->y3d);
	draw_square(game->player.x, game->player.y, 10, 0x00FF00, game);
	draw_map(game);
	fraction = PI / 3 / game->y3d->biggest_width;
	start_x = game->player.angle - PI / 6;
	i = 0;
    while(i < game->y3d->biggest_width)
    {
        draw_line(&game->player, game, start_x);
        start_x += fraction;
        i++;
    }
	mlx_put_image_to_window(game->mlx, game->win, game->img, 0, 0);
	return (0);
}

#include "../y3d.h"

int	key_press(int keycode, t_player *player)
{
	printf("%d\n", keycode);
	if (keycode == W)
		player->key_up = true;
	if (keycode == S)
		player->key_down = true;
	if (keycode == A)
		player->key_left = true;
	if (keycode == D)
		player->key_right = true;
	 if(keycode == LEFT)
	     player->left_rotate = true;
	 if(keycode == RIGHT)
	     player->right_rotate = true;
	return (0);
}

int	key_release(int keycode, t_player *player)
{
	if (keycode == W)
		player->key_up = false;
	if (keycode == S)
		player->key_down = false;
	if (keycode == A)
		player->key_left = false;
	if (keycode == D)
		player->key_right = false;
	if (keycode == LEFT)
		player->left_rotate = false;
	if (keycode == RIGHT)
		player->right_rotate = false;
	return (0);
}

bool	set_x_y(t_y3d *data, int *x, int *y)
{
	int		i;
	int		j;
	bool	is_found;

	i = -1;
	is_found = false;
	while (++i, i < data->height)
	{
		j = -1;
		while (++j, j < data->row_width[i])
		{
			if (data->map[i][j] == 'W' || data->map[i][j] == 'N'
				|| data->map[i][j] == 'E' || data->map[i][j] == 'S')
			{
				is_found = true;
				*x = j * TILE_SIZE;
				*y = i * TILE_SIZE;
				return (true);
			}
		}
	}
	return (false);
}
void	init_player(t_player *player, t_y3d *data)
{
	int	x;
	int	y;

	if (set_x_y(data, &x, &y))
	{
		player->x = x;
		player->y = y;
	}
	player->angle = PI / 2;
	player->key_up = false;
	player->key_down = false;
	player->key_left = false;
	player->key_right = false;
	player->left_rotate = false;
	player->right_rotate = false;
}

bool	can_move_to_position(t_y3d *data, float y, float x)
{
	int	new_x;
	int	new_y;
	new_x = (int)x;
	new_y = (int)y;

	if (new_y < 0 || new_y >= data->height || new_x < 0 || new_x >= data->row_width[new_y])
		return (false);

	if (data->map[new_y][new_x] == '1')
		return (false);

	return (true);
}

void	player_move(t_player *player, t_y3d *data, float y_offset, float x_offset)
{
	float	new_x;
	float	new_y;

	new_x = x_offset + player->x;
	new_y = y_offset + player->y;

	if (can_move_to_position(data, new_y, new_x))
	{
		player->y = new_y;
		player->x = new_x;
	}
}

bool touch(float px, float py, t_y3d *data)
{
    int x = px / TILE_SIZE;
    int y = py / TILE_SIZE;
    if(data->map[y][x] == '1')
        return true;
    return false;
}

void	move_player(t_player *player, t_y3d *data)
{
	int		speed;
	float	angle_speed;
	float	cos_angle;
	float	sin_angle;
	(void) data;
	speed = 3;
	angle_speed = 0.03;
	cos_angle = cos(player->angle);
	sin_angle = sin(player->angle);
	if (player->left_rotate)
		player->angle -= angle_speed;
	if (player->right_rotate)
		player->angle += angle_speed;
	if (player->angle > 2 * PI)
		player->angle = 0;
	if (player->angle < 0)
		player->angle = 2 * PI;
	if (player->key_up)
	{
		player->x -= cos_angle * speed;
		player->y -= sin_angle * speed;
	}
	if (player->key_down)
	{
		player->x += cos_angle * speed;
		player->y += sin_angle * speed;
	}
	if (player->key_left)
	{
		player->x -= sin_angle * speed;		
		player->y += cos_angle * speed;

	}
	if (player->key_right)
	{
		player->x += sin_angle * speed;
		player->y -= cos_angle * speed;
	}
}
